function [descriptors, patches] = descriptors_hog(img, vPoints, nBins, cellWidth, cellHeight)
% Generate a descriptor based on the found feature points. The descriptor
% is a histogram of oriented gradients and is generated by a 4x4-cell grid,
% each cell with the specified size.
%
% Input
%   img             The image for which the descriptors and pathces are
%                   generated.
%   vPoints         The feature points for which the descriptors are
%                   generated.
%   cellWidth       Width of the cell used for the 4x4-cells.
%   cellHeight      Height of the cell used for the 4x4-cells.
% 
% Output
%   descriptors     Nx128 matrix which contain the hog-descriptor for each
%                   feature. (N = number of feature points)
%   patches         Nx(16*cellWidth*cellHeight) matrix which represents the
%                   patch which fits to the descriptor.

%% Initialization
w = cellWidth;
h = cellHeight;
s = w * h; % cell-size

% Initialize output
descriptors = zeros(0, nBins*4*4);
patches = zeros(0, 4*w*4*h);

%% Generate descriptors
% Get the gradient in x- and y-direction
[grad_x, grad_y] = gradient(img);

% Get the angle of the direction and its length
angles = atan2(grad_y, grad_x);
magnit = ((grad_y.^2) + (grad_x.^2)).^.5;

for i = 1:size(vPoints,1)
    current = round(vPoints(i,:));
    patch = 0;
    
    % extract the patch from the image
    localPatch = img((current(2)-2*h):(current(2)+2*h-1), (current(1)-2*w):(current(1)+2*w-1), :);
    patches(i, :) = reshape(localPatch, 1, 4*w*4*h);
    
    % loop through each of the 16 neighbour cells
    for u = -2:1
        for v = -2:1
            patch = patch + 1;
            
            % Get the upper left corner point of the cell
            startX = u*w + current(1);
            startY = v*h + current(2);
            
            % Get all the angles and lengths for all pixels in the cell
            cellAngles = angles(startY:startY+(h-1), startX:startX+(w-1));
            cellMagnit = magnit(startY:startY+(h-1), startX:startX+(w-1));
            
            % Convert to vector
            cellAngles = reshape(cellAngles, s, 1);
            cellMagnit = reshape(cellMagnit, s, 1);
            
            % Start the histogram
            bin = 0;
            hist = zeros(1, nBins);
            
            % Discretisize the angles and store each gradient with its
            % length in the correct bin.
            for ang_lim = -pi+2*pi/nBins:2*pi/nBins:pi
                bin=bin+1;
                
                % Check which cell contains an angle which fits into the
                % current bin
                for k=1:s
                    if cellAngles(k) < ang_lim
                        % Reset the angle to a high number so that it will
                        % not count anymore.
                        cellAngles(k) = 100;
                        
                        % Add the length of the gradient 
                        hist(bin) = hist(bin) + cellMagnit(k);
                    end
                end
            end
            
            % When there is anything in the histogram, normalize it and
            % save it in the complete descriptor vector
            if norm(hist) ~= 0
                hist = hist / (norm(hist));
                descriptors(i, (patch-1)*nBins+1:patch*nBins) = hist;
            end
        end
    end
end

end
